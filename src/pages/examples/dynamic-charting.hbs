---
title: Dynamic feature charting with Chart.js
description: Plot feature attributes on a dynamic chart that updates automatically as users pan and zoom. This demo relies on <a href="https://www.chartjs.org/">Chart.js</a> to render an interactive scatterplot.
layout: example.hbs
---
<style>
  .chart-container {
    height: 275px;
    width: 275px;
    /* horizontally center and
    add some vertical spacing  */
    margin: 10px auto;
    outline: 1px solid #00ADA7;

    /* rules to allow the chart to hover over the Leaflet map control: */
    z-index: 401;
    position: absolute;
    top: 0px;
    right: 10px;
    background-color: white;
  }
</style>

<div id="map">
  <!-- Chart.js scatterplot location -->
  <div class="chart-container">
    <canvas id="chartCanvas"></canvas>
  </div>
</div>



<!-- Load Chart.js from CDN -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.3/Chart.min.js"></script>

<script>
  // STEP 1: MAKE A MAP AND ADD LAYERS
  var map = L.map('map').setView([45.526, -122.667], 13);

  L.esri.basemapLayer('Topographic').addTo(map);

  // create and add a feature layer
  // features from this layer will appear in the Chart.js scatterplot
  var portlandTreesFeatureLayer = L.esri.featureLayer({
    url: 'https://services.arcgis.com/rOo16HdIMeOBI4Mb/arcgis/rest/services/Heritage_Trees_Portland/FeatureServer/0',
  });
  portlandTreesFeatureLayer.addTo(map);

  // STEP 2: DEFINE A CHART
  // this is a static scatterplot chart definition for now, but it will
  // soon become dynamic by responding to map and feature layer events
  var initialChartData = {
    datasets: [{
      label: 'Portland Heritage Trees',
      // the data values are empty at this moment
      // and will be updated dynamically below
      data: []
    }]
  };

  var chartOptions = {
    scales: {
      xAxes: [{
        scaleLabel: {
          display: true,
          labelString: 'tree diameter'
        },
        ticks: {
          beginAtZero: true,
          max: 150,
          stepSize: 50
        }
      }],
      yAxes: [{
        scaleLabel: {
          display: true,
          labelString: 'tree height'
        },
        ticks: {
          beginAtZero: true,
          max: 250,
          stepSize: 50
        }
      }]
    },
    maintainAspectRatio: false,
    // turn off animations during chart data updates
    animation: {
      duration: 0,
    }
  };

  var chart = new Chart('chartCanvas', {
    type: 'scatter',
    data: initialChartData,
    options: chartOptions
  });

  // STEP 3: MAKE THE CHART DYNAMIC
  // show in the scatterplot only the features in the map's current extent
  // by handling several events from both the map and feature layer
  map.on('zoom move', updateChart);
  portlandTreesFeatureLayer.on('load', updateChart);

  function updateChart() {
    // reformat the features' attributes of interest into
    // the data array format required by the Chart.js scatterplot
    var scatterPlotDataArray = [];

    portlandTreesFeatureLayer.eachActiveFeature(function(e) {
      // loop over each active feature in the map extent and
      // push an object into the scatterPlotDataArray in this format:

      // {
      //   x: diameter attribute value,
      //   y: height attribute value
      // }

      scatterPlotDataArray.push({
        x: e.feature.properties.DIAMETER,
        y: e.feature.properties.HEIGHT
      });
    });

    // assign the new scatterPlotDataArray to the chart's data property
    chart.data.datasets[0].data = scatterPlotDataArray;

    // finally, instruct the chart to re-draw itself with the new data
    chart.update();
  }
</script>
